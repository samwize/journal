#!/usr/bin/env ruby

require 'rubygems'
require "bundler/setup"
require 'commander/import'
require 'json'

program :name, "Journal"
program :version, '1.1.0'
program :description, 'A cli for creating journal entry with correct file name'

command :new do |c|
  c.syntax = 'journal new "My entry"'
  c.description = 'Create yyyy-MM-dd-my-entry.md'
  c.option '--format STRING', String, 'Option file format md (default) or markdown'
  c.option '-d STRING', String, 'Option directory to create journal in'
  c.action do |args, options|
    options.default :format => 'md', :d => '.'
  	title = args[0]
    createJournal(title, options.format, options.d)
  end
end

command :newpage do |c|
  c.syntax = 'journal newpage "My page"'
  c.description = 'Create my-page.md in current folder'
  c.option '--format STRING', String, 'Option file format md (default) or markdown'
  c.option '-d STRING', String, 'Option directory to create journal in'
  c.action do |args, options|
    options.default :format => 'md', :d => '.'
  	title = args[0]
    createPage(title, options.format, options.d)
  end
end

command :dehtml do |c|
  c.syntax = 'journal dehtml xxx.html'
  c.description = 'Convert xxx.markdown'
  c.action do |args, options|
    htmlfile = args[0]
    convertHtmlToMarkdown(htmlfile)
  end
end

command :objc_to_swift do |c|
  c.syntax = 'journal objc_to_swift AppDelegate.m'
  c.description = 'Convert Objective-C to Swift'
  c.action do |args, options|
    objcFile = args[0]
    convertObjcToSwift(objcFile)
  end
end

def createJournal(title, format, directory)
  slug = title.downcase.strip.gsub(' ', '-').gsub(/[^\w-]/, '')
  today = DateTime.now.strftime('%Y-%m-%d')
  filename = today + "-" + slug + "." + format
  fullpath = File.join(directory, filename)
  createFile(fullpath, "# #{title}")
  pbcopy(fullpath)
  puts "#{fullpath} created and path copied"
end

def createPage(title, format, directory)
  slug = title.downcase.strip.gsub(' ', '-').gsub(/[^\w-]/, '')
  filename = slug + "." + format
  fullpath = File.join(directory, filename)
  createFile(fullpath, "# #{title}")
  pbcopy(fullpath)
  puts "#{fullpath} created and path copied"
end

def createFile(path, content)
  File.open(path, 'w') {|f| f.write(content) }
end

def pbcopy(input)
  str = input.to_s
  IO.popen('pbcopy', 'w') { |f| f << str }
  str
end

def convertHtmlToMarkdown(htmlfile)
  mdFile = htmlfile.gsub(".html", ".markdown")
  File.rename(htmlfile, mdFile)

  contents = File.open(mdFile, "rb") { |f| f.read }
  md = contents.gsub(/<br \/>/, "\n")
    .gsub(/&nbsp;/, " ")
    .gsub(/&amp;/, "&")
    .gsub(/&lt;/, "<")
    .gsub(/&gt;/, ">")
    .gsub(/<i>(.*?)<\/i>/, "_\\1_")
    .gsub(/<em.*?>(.*?)<\/em>/, "_\\1_")
    .gsub(/<font .*?italic.*?>(.*?)<\/font>/, "_\\1_")
    .gsub(/<b>(.*?)<\/b>/, "**\\1**")
    .gsub(/<strong.*?>(.*?)<\/strong>/, "**\\1**")
    .gsub(/<font .*?bold.*?>(.*?)<\/font>/, "**\\1**")
    .gsub(/<strike.*?>(.*?)<\/strike>/, "~~\\1~~")
    .gsub(/<a .*?href=\"(http.*?)\".*?>(.*?)<\/a>/, "[\\2](\\1)")
    .gsub(/<img.*?src=\"(http.*?)\".*?\/>/, "![](\\1)")
    .gsub(/<blockquote.*?>(.*?)<\/blockquote>/, "\n> \\1\n\n")
    .gsub(/<span.*?>([\s\S]*?)<\/span>/, "\\1")
    .gsub(/<time.*?>(.*?)<\/time>/, "\\1")
    .gsub(/<\/?div.*?>/, "\n")
    .gsub(/<p.*?>([\s\S]*?)<\/p>/, "\n\n\\1\n")
    .gsub(/<\/?section.*?>/, "\n")
    .gsub(/<\/?figure.*?>/, "\n")
    .gsub(/<\/?canvas.*?>/, "\n")
    .gsub(/<\/?table.*?>/, "")
    .gsub(/<\/?tbody.*?>/, "")
    .gsub(/<tr.*?>/, "\n")
    .gsub(/<\/tr.*?>/, "")
    .gsub(/<\/?td.*?>/, "")
    .gsub(/<pre.*?>([\s\S]*?)<\/pre>/, "\n```\n\\1\n```\n")
    .gsub(/<h2.*?>(.*?)<\/h2>/, "\n# \\1\n\n")
    .gsub(/<h3.*?>(.*?)<\/h3>/, "\n## \\1\n\n")
    .gsub(/<\/?ul.*?>/, "\n")
    .gsub(/<\/ol.*?>/, "\n") # Only </ol>, so that we can manually fix for <ol> numbering
    .gsub(/<li.*?>([\s\S]*?)<\/li>/, "\n- \\1")
    .gsub(/<hr.*?\/>/, "---\n")
    .gsub(/<hr.*?\/>/, "---\n")
    .gsub(/^blogger_id:.*?\n/, "")
    .gsub(/^blogger_orig_url:.*?\n/, "")
    .gsub(/^modified_time:.*?\n/, "")
    .gsub(/^thumbnail:.*?\n/, "")
    .gsub(/^(?:[\t ]*(?:\r?\n|\r))+/, "\n")
    .gsub(/[\n]{3,}/, "\n\n")
  # puts "#{md}"

  File.open(mdFile, "w") do |f|
    f.write(md)
  end
end

def convertObjcToSwift(objcFile)
  swiftFile = objcFile.gsub(".m", "-2.swift")
  File.new(swiftFile, "w+")

  contents = File.open(objcFile, "rb") { |f| f.read }
  newContents = contents.gsub(/@"(.*?)"/, "\"\\1\"") # Remove @ prefix in string
    .gsub(/^(.*);$/, "\\1") # Remove last ;
    .gsub("[NSUserDefaults standardUserDefaults]", "UserDefaults.standard")
    .gsub("[NSNotificationCenter defaultCenter]", "NotificationCenter.default")
    .gsub("[UIApplication sharedApplication]", "UIApplication.shared")
    .gsub(/\[UIImage imageNamed:([^\s\[\]]+?)\]/, "UIImage(named: \\1)")
    .gsub(/Local\("(.*)"\)/, "LS(\"\\1\")")
    .gsub(/\[([a-zA-Z0-9_.]+?) ([a-zA-Z0-9_]+?)\]/, "\\1.\\2()") # myClass.method()
    .gsub(/\[([a-zA-Z0-9_.]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?)\]/, "\\1.\\2(\\3)") # myClass.method(foo)
    .gsub(/\[([a-zA-Z0-9_.]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?)\]/, "\\1.\\2(\\3, \\4: \\5)") # myClass.method(foo, b1: b)
    .gsub(/\[([a-zA-Z0-9_.]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?)\]/, "\\1.\\2(\\3, \\4: \\5, \\6: \\7)") # myClass.method(foo, b1: b, b2: b)
    .gsub(/\[([a-zA-Z0-9_.]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?) ([a-zA-Z0-9_]+?):([^\s\[\]]+?)\]/, "\\1.\\2(\\3, \\4: \\5, \\6: \\7, \\8: \\9)") # myClass.method(foo, b1: b, b2: b, b3: b)
    .gsub(/-\(([a-zA-Z0-9_*]+?)\)([a-zA-Z0-9_]+?) \{/, "func \\2() -> \\1 {") # func foo() {
    .gsub(/\+\(([a-zA-Z0-9_*]+?)\)([a-zA-Z0-9_]+?) \{/, "class func \\2() -> \\1 {") # class func foo() {
    .gsub(/-\(([a-zA-Z0-9_*]+?)\)([a-zA-Z0-9_]+?):\(([a-zA-Z0-9_*]+?)\)([a-zA-Z0-9_]+?) \{/, "func \\2(\\4: \\3) -> \\1 {") # func foo(bar1: bar) {
    .gsub(/\+\(([a-zA-Z0-9_*]+?)\)([a-zA-Z0-9_]+?):\(([a-zA-Z0-9_*]+?)\)([a-zA-Z0-9_]+?) \{/, "class func \\2(\\4: \\3) -> \\1 {") # func foo(bar1: bar) {
    .gsub(/ -> void \{/, " {") # Clean up void return
    .gsub(/([a-zA-Z0-9_]+?) \*([a-zA-Z0-9_]+?) = /, "let \\2 = ") # Set var
    .gsub(/ NO/, " false")
    .gsub(/ YES/, " true")

  File.open(swiftFile, "w") do |f|
    # puts "#{newContents}"
    f.write(newContents)
  end

end
